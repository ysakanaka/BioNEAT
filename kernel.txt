__kernel void rd_compute(__global float4 *a_in,__global float4 *b_in,__global float4 *c_in,__global float4 *d_in,__global float4 *e_in,__global float4 *f_in,__global float4 *g_in,__global float4 *h_in,__global float4 *i_in,__global float4 *j_in,__global float4 *k_in,__global float4 *l_in,__global float4 *m_in,__global float4 *n_in,__global float4 *o_in,__global float4 *p_in,__global float4 *q_in,__global float4 *r_in,__global float4 *s_in,__global float4 *t_in,__global float4 *u_in,__global float4 *v_in,__global float4 *w_in,__global float4 *x_in,__global float4 *y_in,__global float4 *a_out,__global float4 *b_out,__global float4 *c_out,__global float4 *d_out,__global float4 *e_out,__global float4 *f_out,__global float4 *g_out,__global float4 *h_out,__global float4 *i_out,__global float4 *j_out,__global float4 *k_out,__global float4 *l_out,__global float4 *m_out,__global float4 *n_out,__global float4 *o_out,__global float4 *p_out,__global float4 *q_out,__global float4 *r_out,__global float4 *s_out,__global float4 *t_out,__global float4 *u_out,__global float4 *v_out,__global float4 *w_out,__global float4 *x_out,__global float4 *y_out)
{
    const int index_x = get_global_id(0);
    const int index_y = get_global_id(1);
    const int index_z = get_global_id(2);
    const int X = get_global_size(0);
    const int Y = get_global_size(1);
    const int Z = get_global_size(2);
    const int index_here = X*(Y*index_z + index_y) + index_x;

    float4 a = a_in[index_here];
    float4 b = b_in[index_here];
    float4 c = c_in[index_here];
    float4 d = d_in[index_here];
    float4 e = e_in[index_here];
    float4 f = f_in[index_here];
    float4 g = g_in[index_here];
    float4 h = h_in[index_here];
    float4 i = i_in[index_here];
    float4 j = j_in[index_here];
    float4 k = k_in[index_here];
    float4 l = l_in[index_here];
    float4 m = m_in[index_here];
    float4 n = n_in[index_here];
    float4 o = o_in[index_here];
    float4 p = p_in[index_here];
    float4 q = q_in[index_here];
    float4 r = r_in[index_here];
    float4 s = s_in[index_here];
    float4 t = t_in[index_here];
    float4 u = u_in[index_here];
    float4 v = v_in[index_here];
    float4 w = w_in[index_here];
    float4 x = x_in[index_here];
    float4 y = y_in[index_here];

    // compute the Laplacians of each chemical
    // 2D standard 9-point stencil: [ 1,4,1; 4,-20,4; 1,4,1 ] / 6
    const int xm1 = max(0,index_x-1);
    const int ym1 = max(0,index_y-1);
    const int xp1 = min(X-1,index_x+1);
    const int yp1 = min(Y-1,index_y+1);
    const int index_n =  X*(Y*index_z + ym1) + index_x;
    const int index_ne = X*(Y*index_z + ym1) + xp1;
    const int index_e =  X*(Y*index_z + index_y) + xp1;
    const int index_se = X*(Y*index_z + yp1) + xp1;
    const int index_s =  X*(Y*index_z + yp1) + index_x;
    const int index_sw = X*(Y*index_z + yp1) + xm1;
    const int index_w =  X*(Y*index_z + index_y) + xm1;
    const int index_nw = X*(Y*index_z + ym1) + xm1;
    float4 a_n = a_in[index_n];
    float4 a_ne = a_in[index_ne];
    float4 a_e = a_in[index_e];
    float4 a_se = a_in[index_se];
    float4 a_s = a_in[index_s];
    float4 a_sw = a_in[index_sw];
    float4 a_w = a_in[index_w];
    float4 a_nw = a_in[index_nw];
    float4 b_n = b_in[index_n];
    float4 b_ne = b_in[index_ne];
    float4 b_e = b_in[index_e];
    float4 b_se = b_in[index_se];
    float4 b_s = b_in[index_s];
    float4 b_sw = b_in[index_sw];
    float4 b_w = b_in[index_w];
    float4 b_nw = b_in[index_nw];
    float4 c_n = c_in[index_n];
    float4 c_ne = c_in[index_ne];
    float4 c_e = c_in[index_e];
    float4 c_se = c_in[index_se];
    float4 c_s = c_in[index_s];
    float4 c_sw = c_in[index_sw];
    float4 c_w = c_in[index_w];
    float4 c_nw = c_in[index_nw];
    float4 d_n = d_in[index_n];
    float4 d_ne = d_in[index_ne];
    float4 d_e = d_in[index_e];
    float4 d_se = d_in[index_se];
    float4 d_s = d_in[index_s];
    float4 d_sw = d_in[index_sw];
    float4 d_w = d_in[index_w];
    float4 d_nw = d_in[index_nw];
    float4 e_n = e_in[index_n];
    float4 e_ne = e_in[index_ne];
    float4 e_e = e_in[index_e];
    float4 e_se = e_in[index_se];
    float4 e_s = e_in[index_s];
    float4 e_sw = e_in[index_sw];
    float4 e_w = e_in[index_w];
    float4 e_nw = e_in[index_nw];
    float4 f_n = f_in[index_n];
    float4 f_ne = f_in[index_ne];
    float4 f_e = f_in[index_e];
    float4 f_se = f_in[index_se];
    float4 f_s = f_in[index_s];
    float4 f_sw = f_in[index_sw];
    float4 f_w = f_in[index_w];
    float4 f_nw = f_in[index_nw];
    float4 g_n = g_in[index_n];
    float4 g_ne = g_in[index_ne];
    float4 g_e = g_in[index_e];
    float4 g_se = g_in[index_se];
    float4 g_s = g_in[index_s];
    float4 g_sw = g_in[index_sw];
    float4 g_w = g_in[index_w];
    float4 g_nw = g_in[index_nw];
    float4 h_n = h_in[index_n];
    float4 h_ne = h_in[index_ne];
    float4 h_e = h_in[index_e];
    float4 h_se = h_in[index_se];
    float4 h_s = h_in[index_s];
    float4 h_sw = h_in[index_sw];
    float4 h_w = h_in[index_w];
    float4 h_nw = h_in[index_nw];
    float4 i_n = i_in[index_n];
    float4 i_ne = i_in[index_ne];
    float4 i_e = i_in[index_e];
    float4 i_se = i_in[index_se];
    float4 i_s = i_in[index_s];
    float4 i_sw = i_in[index_sw];
    float4 i_w = i_in[index_w];
    float4 i_nw = i_in[index_nw];
    float4 j_n = j_in[index_n];
    float4 j_ne = j_in[index_ne];
    float4 j_e = j_in[index_e];
    float4 j_se = j_in[index_se];
    float4 j_s = j_in[index_s];
    float4 j_sw = j_in[index_sw];
    float4 j_w = j_in[index_w];
    float4 j_nw = j_in[index_nw];
    float4 k_n = k_in[index_n];
    float4 k_ne = k_in[index_ne];
    float4 k_e = k_in[index_e];
    float4 k_se = k_in[index_se];
    float4 k_s = k_in[index_s];
    float4 k_sw = k_in[index_sw];
    float4 k_w = k_in[index_w];
    float4 k_nw = k_in[index_nw];
    float4 l_n = l_in[index_n];
    float4 l_ne = l_in[index_ne];
    float4 l_e = l_in[index_e];
    float4 l_se = l_in[index_se];
    float4 l_s = l_in[index_s];
    float4 l_sw = l_in[index_sw];
    float4 l_w = l_in[index_w];
    float4 l_nw = l_in[index_nw];
    float4 m_n = m_in[index_n];
    float4 m_ne = m_in[index_ne];
    float4 m_e = m_in[index_e];
    float4 m_se = m_in[index_se];
    float4 m_s = m_in[index_s];
    float4 m_sw = m_in[index_sw];
    float4 m_w = m_in[index_w];
    float4 m_nw = m_in[index_nw];
    float4 n_n = n_in[index_n];
    float4 n_ne = n_in[index_ne];
    float4 n_e = n_in[index_e];
    float4 n_se = n_in[index_se];
    float4 n_s = n_in[index_s];
    float4 n_sw = n_in[index_sw];
    float4 n_w = n_in[index_w];
    float4 n_nw = n_in[index_nw];
    float4 o_n = o_in[index_n];
    float4 o_ne = o_in[index_ne];
    float4 o_e = o_in[index_e];
    float4 o_se = o_in[index_se];
    float4 o_s = o_in[index_s];
    float4 o_sw = o_in[index_sw];
    float4 o_w = o_in[index_w];
    float4 o_nw = o_in[index_nw];
    float4 p_n = p_in[index_n];
    float4 p_ne = p_in[index_ne];
    float4 p_e = p_in[index_e];
    float4 p_se = p_in[index_se];
    float4 p_s = p_in[index_s];
    float4 p_sw = p_in[index_sw];
    float4 p_w = p_in[index_w];
    float4 p_nw = p_in[index_nw];
    float4 q_n = q_in[index_n];
    float4 q_ne = q_in[index_ne];
    float4 q_e = q_in[index_e];
    float4 q_se = q_in[index_se];
    float4 q_s = q_in[index_s];
    float4 q_sw = q_in[index_sw];
    float4 q_w = q_in[index_w];
    float4 q_nw = q_in[index_nw];
    float4 r_n = r_in[index_n];
    float4 r_ne = r_in[index_ne];
    float4 r_e = r_in[index_e];
    float4 r_se = r_in[index_se];
    float4 r_s = r_in[index_s];
    float4 r_sw = r_in[index_sw];
    float4 r_w = r_in[index_w];
    float4 r_nw = r_in[index_nw];
    float4 s_n = s_in[index_n];
    float4 s_ne = s_in[index_ne];
    float4 s_e = s_in[index_e];
    float4 s_se = s_in[index_se];
    float4 s_s = s_in[index_s];
    float4 s_sw = s_in[index_sw];
    float4 s_w = s_in[index_w];
    float4 s_nw = s_in[index_nw];
    float4 t_n = t_in[index_n];
    float4 t_ne = t_in[index_ne];
    float4 t_e = t_in[index_e];
    float4 t_se = t_in[index_se];
    float4 t_s = t_in[index_s];
    float4 t_sw = t_in[index_sw];
    float4 t_w = t_in[index_w];
    float4 t_nw = t_in[index_nw];
    float4 u_n = u_in[index_n];
    float4 u_ne = u_in[index_ne];
    float4 u_e = u_in[index_e];
    float4 u_se = u_in[index_se];
    float4 u_s = u_in[index_s];
    float4 u_sw = u_in[index_sw];
    float4 u_w = u_in[index_w];
    float4 u_nw = u_in[index_nw];
    float4 v_n = v_in[index_n];
    float4 v_ne = v_in[index_ne];
    float4 v_e = v_in[index_e];
    float4 v_se = v_in[index_se];
    float4 v_s = v_in[index_s];
    float4 v_sw = v_in[index_sw];
    float4 v_w = v_in[index_w];
    float4 v_nw = v_in[index_nw];
    float4 w_n = w_in[index_n];
    float4 w_ne = w_in[index_ne];
    float4 w_e = w_in[index_e];
    float4 w_se = w_in[index_se];
    float4 w_s = w_in[index_s];
    float4 w_sw = w_in[index_sw];
    float4 w_w = w_in[index_w];
    float4 w_nw = w_in[index_nw];
    float4 x_n = x_in[index_n];
    float4 x_ne = x_in[index_ne];
    float4 x_e = x_in[index_e];
    float4 x_se = x_in[index_se];
    float4 x_s = x_in[index_s];
    float4 x_sw = x_in[index_sw];
    float4 x_w = x_in[index_w];
    float4 x_nw = x_in[index_nw];
    float4 y_n = y_in[index_n];
    float4 y_ne = y_in[index_ne];
    float4 y_e = y_in[index_e];
    float4 y_se = y_in[index_se];
    float4 y_s = y_in[index_s];
    float4 y_sw = y_in[index_sw];
    float4 y_w = y_in[index_w];
    float4 y_nw = y_in[index_nw];
    const float4 _K0 = -20.0f/6.0f; // center weight
    const float _K1 = 4.0f/6.0f; // edge-neighbors
    const float _K2 = 1.0f/6.0f; // vertex-neighbors
    float4 laplacian_a = (float4)(a_n.x*_K1 + a_n.y*_K2 + a.y*_K1 + a_s.y*_K2 + a_s.x*_K1 + a_sw.w*_K2 + a_w.w*_K1 + a_nw.w*_K2,
    a_n.y*_K1 + a_n.z*_K2 + a.z*_K1 + a_s.z*_K2 + a_s.y*_K1 + a_s.x*_K2 + a.x*_K1 + a_n.x*_K2,
    a_n.z*_K1 + a_n.w*_K2 + a.w*_K1 + a_s.w*_K2 + a_s.z*_K1 + a_s.y*_K2 + a.y*_K1 + a_n.y*_K2,
    a_n.w*_K1 + a_ne.x*_K2 + a_e.x*_K1 + a_se.x*_K2 + a_s.w*_K1 + a_s.z*_K2 + a.z*_K1 + a_n.z*_K2 ) + a*_K0;
    float4 laplacian_b = (float4)(b_n.x*_K1 + b_n.y*_K2 + b.y*_K1 + b_s.y*_K2 + b_s.x*_K1 + b_sw.w*_K2 + b_w.w*_K1 + b_nw.w*_K2,
    b_n.y*_K1 + b_n.z*_K2 + b.z*_K1 + b_s.z*_K2 + b_s.y*_K1 + b_s.x*_K2 + b.x*_K1 + b_n.x*_K2,
    b_n.z*_K1 + b_n.w*_K2 + b.w*_K1 + b_s.w*_K2 + b_s.z*_K1 + b_s.y*_K2 + b.y*_K1 + b_n.y*_K2,
    b_n.w*_K1 + b_ne.x*_K2 + b_e.x*_K1 + b_se.x*_K2 + b_s.w*_K1 + b_s.z*_K2 + b.z*_K1 + b_n.z*_K2 ) + b*_K0;
    float4 laplacian_c = (float4)(c_n.x*_K1 + c_n.y*_K2 + c.y*_K1 + c_s.y*_K2 + c_s.x*_K1 + c_sw.w*_K2 + c_w.w*_K1 + c_nw.w*_K2,
    c_n.y*_K1 + c_n.z*_K2 + c.z*_K1 + c_s.z*_K2 + c_s.y*_K1 + c_s.x*_K2 + c.x*_K1 + c_n.x*_K2,
    c_n.z*_K1 + c_n.w*_K2 + c.w*_K1 + c_s.w*_K2 + c_s.z*_K1 + c_s.y*_K2 + c.y*_K1 + c_n.y*_K2,
    c_n.w*_K1 + c_ne.x*_K2 + c_e.x*_K1 + c_se.x*_K2 + c_s.w*_K1 + c_s.z*_K2 + c.z*_K1 + c_n.z*_K2 ) + c*_K0;
    float4 laplacian_d = (float4)(d_n.x*_K1 + d_n.y*_K2 + d.y*_K1 + d_s.y*_K2 + d_s.x*_K1 + d_sw.w*_K2 + d_w.w*_K1 + d_nw.w*_K2,
    d_n.y*_K1 + d_n.z*_K2 + d.z*_K1 + d_s.z*_K2 + d_s.y*_K1 + d_s.x*_K2 + d.x*_K1 + d_n.x*_K2,
    d_n.z*_K1 + d_n.w*_K2 + d.w*_K1 + d_s.w*_K2 + d_s.z*_K1 + d_s.y*_K2 + d.y*_K1 + d_n.y*_K2,
    d_n.w*_K1 + d_ne.x*_K2 + d_e.x*_K1 + d_se.x*_K2 + d_s.w*_K1 + d_s.z*_K2 + d.z*_K1 + d_n.z*_K2 ) + d*_K0;
    float4 laplacian_e = (float4)(e_n.x*_K1 + e_n.y*_K2 + e.y*_K1 + e_s.y*_K2 + e_s.x*_K1 + e_sw.w*_K2 + e_w.w*_K1 + e_nw.w*_K2,
    e_n.y*_K1 + e_n.z*_K2 + e.z*_K1 + e_s.z*_K2 + e_s.y*_K1 + e_s.x*_K2 + e.x*_K1 + e_n.x*_K2,
    e_n.z*_K1 + e_n.w*_K2 + e.w*_K1 + e_s.w*_K2 + e_s.z*_K1 + e_s.y*_K2 + e.y*_K1 + e_n.y*_K2,
    e_n.w*_K1 + e_ne.x*_K2 + e_e.x*_K1 + e_se.x*_K2 + e_s.w*_K1 + e_s.z*_K2 + e.z*_K1 + e_n.z*_K2 ) + e*_K0;
    float4 laplacian_f = (float4)(f_n.x*_K1 + f_n.y*_K2 + f.y*_K1 + f_s.y*_K2 + f_s.x*_K1 + f_sw.w*_K2 + f_w.w*_K1 + f_nw.w*_K2,
    f_n.y*_K1 + f_n.z*_K2 + f.z*_K1 + f_s.z*_K2 + f_s.y*_K1 + f_s.x*_K2 + f.x*_K1 + f_n.x*_K2,
    f_n.z*_K1 + f_n.w*_K2 + f.w*_K1 + f_s.w*_K2 + f_s.z*_K1 + f_s.y*_K2 + f.y*_K1 + f_n.y*_K2,
    f_n.w*_K1 + f_ne.x*_K2 + f_e.x*_K1 + f_se.x*_K2 + f_s.w*_K1 + f_s.z*_K2 + f.z*_K1 + f_n.z*_K2 ) + f*_K0;
    float4 laplacian_g = (float4)(g_n.x*_K1 + g_n.y*_K2 + g.y*_K1 + g_s.y*_K2 + g_s.x*_K1 + g_sw.w*_K2 + g_w.w*_K1 + g_nw.w*_K2,
    g_n.y*_K1 + g_n.z*_K2 + g.z*_K1 + g_s.z*_K2 + g_s.y*_K1 + g_s.x*_K2 + g.x*_K1 + g_n.x*_K2,
    g_n.z*_K1 + g_n.w*_K2 + g.w*_K1 + g_s.w*_K2 + g_s.z*_K1 + g_s.y*_K2 + g.y*_K1 + g_n.y*_K2,
    g_n.w*_K1 + g_ne.x*_K2 + g_e.x*_K1 + g_se.x*_K2 + g_s.w*_K1 + g_s.z*_K2 + g.z*_K1 + g_n.z*_K2 ) + g*_K0;
    float4 laplacian_h = (float4)(h_n.x*_K1 + h_n.y*_K2 + h.y*_K1 + h_s.y*_K2 + h_s.x*_K1 + h_sw.w*_K2 + h_w.w*_K1 + h_nw.w*_K2,
    h_n.y*_K1 + h_n.z*_K2 + h.z*_K1 + h_s.z*_K2 + h_s.y*_K1 + h_s.x*_K2 + h.x*_K1 + h_n.x*_K2,
    h_n.z*_K1 + h_n.w*_K2 + h.w*_K1 + h_s.w*_K2 + h_s.z*_K1 + h_s.y*_K2 + h.y*_K1 + h_n.y*_K2,
    h_n.w*_K1 + h_ne.x*_K2 + h_e.x*_K1 + h_se.x*_K2 + h_s.w*_K1 + h_s.z*_K2 + h.z*_K1 + h_n.z*_K2 ) + h*_K0;
    float4 laplacian_i = (float4)(i_n.x*_K1 + i_n.y*_K2 + i.y*_K1 + i_s.y*_K2 + i_s.x*_K1 + i_sw.w*_K2 + i_w.w*_K1 + i_nw.w*_K2,
    i_n.y*_K1 + i_n.z*_K2 + i.z*_K1 + i_s.z*_K2 + i_s.y*_K1 + i_s.x*_K2 + i.x*_K1 + i_n.x*_K2,
    i_n.z*_K1 + i_n.w*_K2 + i.w*_K1 + i_s.w*_K2 + i_s.z*_K1 + i_s.y*_K2 + i.y*_K1 + i_n.y*_K2,
    i_n.w*_K1 + i_ne.x*_K2 + i_e.x*_K1 + i_se.x*_K2 + i_s.w*_K1 + i_s.z*_K2 + i.z*_K1 + i_n.z*_K2 ) + i*_K0;
    float4 laplacian_j = (float4)(j_n.x*_K1 + j_n.y*_K2 + j.y*_K1 + j_s.y*_K2 + j_s.x*_K1 + j_sw.w*_K2 + j_w.w*_K1 + j_nw.w*_K2,
    j_n.y*_K1 + j_n.z*_K2 + j.z*_K1 + j_s.z*_K2 + j_s.y*_K1 + j_s.x*_K2 + j.x*_K1 + j_n.x*_K2,
    j_n.z*_K1 + j_n.w*_K2 + j.w*_K1 + j_s.w*_K2 + j_s.z*_K1 + j_s.y*_K2 + j.y*_K1 + j_n.y*_K2,
    j_n.w*_K1 + j_ne.x*_K2 + j_e.x*_K1 + j_se.x*_K2 + j_s.w*_K1 + j_s.z*_K2 + j.z*_K1 + j_n.z*_K2 ) + j*_K0;
    float4 laplacian_k = (float4)(k_n.x*_K1 + k_n.y*_K2 + k.y*_K1 + k_s.y*_K2 + k_s.x*_K1 + k_sw.w*_K2 + k_w.w*_K1 + k_nw.w*_K2,
    k_n.y*_K1 + k_n.z*_K2 + k.z*_K1 + k_s.z*_K2 + k_s.y*_K1 + k_s.x*_K2 + k.x*_K1 + k_n.x*_K2,
    k_n.z*_K1 + k_n.w*_K2 + k.w*_K1 + k_s.w*_K2 + k_s.z*_K1 + k_s.y*_K2 + k.y*_K1 + k_n.y*_K2,
    k_n.w*_K1 + k_ne.x*_K2 + k_e.x*_K1 + k_se.x*_K2 + k_s.w*_K1 + k_s.z*_K2 + k.z*_K1 + k_n.z*_K2 ) + k*_K0;
    float4 laplacian_l = (float4)(l_n.x*_K1 + l_n.y*_K2 + l.y*_K1 + l_s.y*_K2 + l_s.x*_K1 + l_sw.w*_K2 + l_w.w*_K1 + l_nw.w*_K2,
    l_n.y*_K1 + l_n.z*_K2 + l.z*_K1 + l_s.z*_K2 + l_s.y*_K1 + l_s.x*_K2 + l.x*_K1 + l_n.x*_K2,
    l_n.z*_K1 + l_n.w*_K2 + l.w*_K1 + l_s.w*_K2 + l_s.z*_K1 + l_s.y*_K2 + l.y*_K1 + l_n.y*_K2,
    l_n.w*_K1 + l_ne.x*_K2 + l_e.x*_K1 + l_se.x*_K2 + l_s.w*_K1 + l_s.z*_K2 + l.z*_K1 + l_n.z*_K2 ) + l*_K0;
    float4 laplacian_m = (float4)(m_n.x*_K1 + m_n.y*_K2 + m.y*_K1 + m_s.y*_K2 + m_s.x*_K1 + m_sw.w*_K2 + m_w.w*_K1 + m_nw.w*_K2,
    m_n.y*_K1 + m_n.z*_K2 + m.z*_K1 + m_s.z*_K2 + m_s.y*_K1 + m_s.x*_K2 + m.x*_K1 + m_n.x*_K2,
    m_n.z*_K1 + m_n.w*_K2 + m.w*_K1 + m_s.w*_K2 + m_s.z*_K1 + m_s.y*_K2 + m.y*_K1 + m_n.y*_K2,
    m_n.w*_K1 + m_ne.x*_K2 + m_e.x*_K1 + m_se.x*_K2 + m_s.w*_K1 + m_s.z*_K2 + m.z*_K1 + m_n.z*_K2 ) + m*_K0;
    float4 laplacian_n = (float4)(n_n.x*_K1 + n_n.y*_K2 + n.y*_K1 + n_s.y*_K2 + n_s.x*_K1 + n_sw.w*_K2 + n_w.w*_K1 + n_nw.w*_K2,
    n_n.y*_K1 + n_n.z*_K2 + n.z*_K1 + n_s.z*_K2 + n_s.y*_K1 + n_s.x*_K2 + n.x*_K1 + n_n.x*_K2,
    n_n.z*_K1 + n_n.w*_K2 + n.w*_K1 + n_s.w*_K2 + n_s.z*_K1 + n_s.y*_K2 + n.y*_K1 + n_n.y*_K2,
    n_n.w*_K1 + n_ne.x*_K2 + n_e.x*_K1 + n_se.x*_K2 + n_s.w*_K1 + n_s.z*_K2 + n.z*_K1 + n_n.z*_K2 ) + n*_K0;
    float4 laplacian_o = (float4)(o_n.x*_K1 + o_n.y*_K2 + o.y*_K1 + o_s.y*_K2 + o_s.x*_K1 + o_sw.w*_K2 + o_w.w*_K1 + o_nw.w*_K2,
    o_n.y*_K1 + o_n.z*_K2 + o.z*_K1 + o_s.z*_K2 + o_s.y*_K1 + o_s.x*_K2 + o.x*_K1 + o_n.x*_K2,
    o_n.z*_K1 + o_n.w*_K2 + o.w*_K1 + o_s.w*_K2 + o_s.z*_K1 + o_s.y*_K2 + o.y*_K1 + o_n.y*_K2,
    o_n.w*_K1 + o_ne.x*_K2 + o_e.x*_K1 + o_se.x*_K2 + o_s.w*_K1 + o_s.z*_K2 + o.z*_K1 + o_n.z*_K2 ) + o*_K0;
    float4 laplacian_p = (float4)(p_n.x*_K1 + p_n.y*_K2 + p.y*_K1 + p_s.y*_K2 + p_s.x*_K1 + p_sw.w*_K2 + p_w.w*_K1 + p_nw.w*_K2,
    p_n.y*_K1 + p_n.z*_K2 + p.z*_K1 + p_s.z*_K2 + p_s.y*_K1 + p_s.x*_K2 + p.x*_K1 + p_n.x*_K2,
    p_n.z*_K1 + p_n.w*_K2 + p.w*_K1 + p_s.w*_K2 + p_s.z*_K1 + p_s.y*_K2 + p.y*_K1 + p_n.y*_K2,
    p_n.w*_K1 + p_ne.x*_K2 + p_e.x*_K1 + p_se.x*_K2 + p_s.w*_K1 + p_s.z*_K2 + p.z*_K1 + p_n.z*_K2 ) + p*_K0;
    float4 laplacian_q = (float4)(q_n.x*_K1 + q_n.y*_K2 + q.y*_K1 + q_s.y*_K2 + q_s.x*_K1 + q_sw.w*_K2 + q_w.w*_K1 + q_nw.w*_K2,
    q_n.y*_K1 + q_n.z*_K2 + q.z*_K1 + q_s.z*_K2 + q_s.y*_K1 + q_s.x*_K2 + q.x*_K1 + q_n.x*_K2,
    q_n.z*_K1 + q_n.w*_K2 + q.w*_K1 + q_s.w*_K2 + q_s.z*_K1 + q_s.y*_K2 + q.y*_K1 + q_n.y*_K2,
    q_n.w*_K1 + q_ne.x*_K2 + q_e.x*_K1 + q_se.x*_K2 + q_s.w*_K1 + q_s.z*_K2 + q.z*_K1 + q_n.z*_K2 ) + q*_K0;
    float4 laplacian_r = (float4)(r_n.x*_K1 + r_n.y*_K2 + r.y*_K1 + r_s.y*_K2 + r_s.x*_K1 + r_sw.w*_K2 + r_w.w*_K1 + r_nw.w*_K2,
    r_n.y*_K1 + r_n.z*_K2 + r.z*_K1 + r_s.z*_K2 + r_s.y*_K1 + r_s.x*_K2 + r.x*_K1 + r_n.x*_K2,
    r_n.z*_K1 + r_n.w*_K2 + r.w*_K1 + r_s.w*_K2 + r_s.z*_K1 + r_s.y*_K2 + r.y*_K1 + r_n.y*_K2,
    r_n.w*_K1 + r_ne.x*_K2 + r_e.x*_K1 + r_se.x*_K2 + r_s.w*_K1 + r_s.z*_K2 + r.z*_K1 + r_n.z*_K2 ) + r*_K0;
    float4 laplacian_s = (float4)(s_n.x*_K1 + s_n.y*_K2 + s.y*_K1 + s_s.y*_K2 + s_s.x*_K1 + s_sw.w*_K2 + s_w.w*_K1 + s_nw.w*_K2,
    s_n.y*_K1 + s_n.z*_K2 + s.z*_K1 + s_s.z*_K2 + s_s.y*_K1 + s_s.x*_K2 + s.x*_K1 + s_n.x*_K2,
    s_n.z*_K1 + s_n.w*_K2 + s.w*_K1 + s_s.w*_K2 + s_s.z*_K1 + s_s.y*_K2 + s.y*_K1 + s_n.y*_K2,
    s_n.w*_K1 + s_ne.x*_K2 + s_e.x*_K1 + s_se.x*_K2 + s_s.w*_K1 + s_s.z*_K2 + s.z*_K1 + s_n.z*_K2 ) + s*_K0;
    float4 laplacian_t = (float4)(t_n.x*_K1 + t_n.y*_K2 + t.y*_K1 + t_s.y*_K2 + t_s.x*_K1 + t_sw.w*_K2 + t_w.w*_K1 + t_nw.w*_K2,
    t_n.y*_K1 + t_n.z*_K2 + t.z*_K1 + t_s.z*_K2 + t_s.y*_K1 + t_s.x*_K2 + t.x*_K1 + t_n.x*_K2,
    t_n.z*_K1 + t_n.w*_K2 + t.w*_K1 + t_s.w*_K2 + t_s.z*_K1 + t_s.y*_K2 + t.y*_K1 + t_n.y*_K2,
    t_n.w*_K1 + t_ne.x*_K2 + t_e.x*_K1 + t_se.x*_K2 + t_s.w*_K1 + t_s.z*_K2 + t.z*_K1 + t_n.z*_K2 ) + t*_K0;
    float4 laplacian_u = (float4)(u_n.x*_K1 + u_n.y*_K2 + u.y*_K1 + u_s.y*_K2 + u_s.x*_K1 + u_sw.w*_K2 + u_w.w*_K1 + u_nw.w*_K2,
    u_n.y*_K1 + u_n.z*_K2 + u.z*_K1 + u_s.z*_K2 + u_s.y*_K1 + u_s.x*_K2 + u.x*_K1 + u_n.x*_K2,
    u_n.z*_K1 + u_n.w*_K2 + u.w*_K1 + u_s.w*_K2 + u_s.z*_K1 + u_s.y*_K2 + u.y*_K1 + u_n.y*_K2,
    u_n.w*_K1 + u_ne.x*_K2 + u_e.x*_K1 + u_se.x*_K2 + u_s.w*_K1 + u_s.z*_K2 + u.z*_K1 + u_n.z*_K2 ) + u*_K0;
    float4 laplacian_v = (float4)(v_n.x*_K1 + v_n.y*_K2 + v.y*_K1 + v_s.y*_K2 + v_s.x*_K1 + v_sw.w*_K2 + v_w.w*_K1 + v_nw.w*_K2,
    v_n.y*_K1 + v_n.z*_K2 + v.z*_K1 + v_s.z*_K2 + v_s.y*_K1 + v_s.x*_K2 + v.x*_K1 + v_n.x*_K2,
    v_n.z*_K1 + v_n.w*_K2 + v.w*_K1 + v_s.w*_K2 + v_s.z*_K1 + v_s.y*_K2 + v.y*_K1 + v_n.y*_K2,
    v_n.w*_K1 + v_ne.x*_K2 + v_e.x*_K1 + v_se.x*_K2 + v_s.w*_K1 + v_s.z*_K2 + v.z*_K1 + v_n.z*_K2 ) + v*_K0;
    float4 laplacian_w = (float4)(w_n.x*_K1 + w_n.y*_K2 + w.y*_K1 + w_s.y*_K2 + w_s.x*_K1 + w_sw.w*_K2 + w_w.w*_K1 + w_nw.w*_K2,
    w_n.y*_K1 + w_n.z*_K2 + w.z*_K1 + w_s.z*_K2 + w_s.y*_K1 + w_s.x*_K2 + w.x*_K1 + w_n.x*_K2,
    w_n.z*_K1 + w_n.w*_K2 + w.w*_K1 + w_s.w*_K2 + w_s.z*_K1 + w_s.y*_K2 + w.y*_K1 + w_n.y*_K2,
    w_n.w*_K1 + w_ne.x*_K2 + w_e.x*_K1 + w_se.x*_K2 + w_s.w*_K1 + w_s.z*_K2 + w.z*_K1 + w_n.z*_K2 ) + w*_K0;
    float4 laplacian_x = (float4)(x_n.x*_K1 + x_n.y*_K2 + x.y*_K1 + x_s.y*_K2 + x_s.x*_K1 + x_sw.w*_K2 + x_w.w*_K1 + x_nw.w*_K2,
    x_n.y*_K1 + x_n.z*_K2 + x.z*_K1 + x_s.z*_K2 + x_s.y*_K1 + x_s.x*_K2 + x.x*_K1 + x_n.x*_K2,
    x_n.z*_K1 + x_n.w*_K2 + x.w*_K1 + x_s.w*_K2 + x_s.z*_K1 + x_s.y*_K2 + x.y*_K1 + x_n.y*_K2,
    x_n.w*_K1 + x_ne.x*_K2 + x_e.x*_K1 + x_se.x*_K2 + x_s.w*_K1 + x_s.z*_K2 + x.z*_K1 + x_n.z*_K2 ) + x*_K0;
    float4 laplacian_y = (float4)(y_n.x*_K1 + y_n.y*_K2 + y.y*_K1 + y_s.y*_K2 + y_s.x*_K1 + y_sw.w*_K2 + y_w.w*_K1 + y_nw.w*_K2,
    y_n.y*_K1 + y_n.z*_K2 + y.z*_K1 + y_s.z*_K2 + y_s.y*_K1 + y_s.x*_K2 + y.x*_K1 + y_n.x*_K2,
    y_n.z*_K1 + y_n.w*_K2 + y.w*_K1 + y_s.w*_K2 + y_s.z*_K1 + y_s.y*_K2 + y.y*_K1 + y_n.y*_K2,
    y_n.w*_K1 + y_ne.x*_K2 + y_e.x*_K1 + y_se.x*_K2 + y_s.w*_K1 + y_s.z*_K2 + y.z*_K1 + y_n.z*_K2 ) + y*_K0;

    float4 delta_a = 0.0f;
    float4 delta_b = 0.0f;
    float4 delta_c = 0.0f;
    float4 delta_d = 0.0f;
    float4 delta_e = 0.0f;
    float4 delta_f = 0.0f;
    float4 delta_g = 0.0f;
    float4 delta_h = 0.0f;
    float4 delta_i = 0.0f;
    float4 delta_j = 0.0f;
    float4 delta_k = 0.0f;
    float4 delta_l = 0.0f;
    float4 delta_m = 0.0f;
    float4 delta_n = 0.0f;
    float4 delta_o = 0.0f;
    float4 delta_p = 0.0f;
    float4 delta_q = 0.0f;
    float4 delta_r = 0.0f;
    float4 delta_s = 0.0f;
    float4 delta_t = 0.0f;
    float4 delta_u = 0.0f;
    float4 delta_v = 0.0f;
    float4 delta_w = 0.0f;
    float4 delta_x = 0.0f;
    float4 delta_y = 0.0f;

    float4 timestep = 0.000100f;
    float4 D_a = 0.820000f;
    float4 D_b = 0.820000f;
    float4 F = 0.035000f;
    float4 D_c = 0.820000f;
    float4 D_d = 0.820000f;
    float4 D_e = 0.820000f;
    float4 D_f = 0.820000f;
    float4 D_g = 0.820000f;
    float4 D_h = 0.820000f;
    float4 D_i = 0.820000f;
    float4 D_j = 0.820000f;
    float4 D_k = 0.820000f;
    float4 D_l = 0.820000f;
    float4 D_m = 0.820000f;
    float4 D_n = 0.820000f;
    float4 D_o = 0.820000f;
    float4 D_p = 0.820000f;
    float4 D_q = 0.820000f;
    float4 D_r = 0.820000f;
    float4 D_s = 0.820000f;
    float4 D_t = 0.820000f;
    float4 D_u = 0.820000f;
    float4 D_v = 0.820000f;
    float4 D_w = 0.820000f;
    float4 D_x = 0.820000f;
    float4 D_y = 0.820000f;

    D_a = 16.0;
    D_b = 16.0;
    D_c = 16.0;
    D_d = 10.7;
    D_e = 10.7;
    D_f = 10.7;
    D_g = 10.7;
    D_h = 10.7;
    D_i = 10.7;
    D_j = 10.7;
    D_k = 10.7;
    D_l = 10.7;
    D_m = 10.7;
    D_n = 10.7;
    D_o = 10.7;
    D_p = 10.7;
    D_q = 10.7;
    D_r = 10.7;
    D_s = 10.7;
    D_t = 10.7;
    D_u = 10.7;
    D_v = 10.7;
    D_w = 10.7;
    D_x = 10.7;
    D_y = 10.7;
    float4 D_ExoAttached = 6.4;
    float4 D_ExoFree = 10.7;
    float4 D_NickAttached = 0.0;
    float4 D_NickFree = 10.7;
    float4 D_PolAttached = 0.0;
    float4 D_PolFree = 10.7;
    float4 ExoConc = 1.0;
    float4 ExoConcAttached = (x + y) * ( 1 - 1 /  ( 1 + a/440.0f+ b/440.0f+ c/150.0f)  );
    float4 ExoConcFree = (x + y) * 1 /  ( 1 + a/440.0f+ b/440.0f+ c/150.0f) ;
    float4 ExoKm = 440.0;
    float4 ExoKmInhib = 150.0;
    float4 ExoVm = 300.0;
    float4 NickConc = 1.0;
    float4 NickConcAttached = (v + w) * ( 1 - 1 /  ( 1 + h/30.0f+ m/30.0f+ r/30.0f)  );
    float4 NickConcFree = (v + w) * 1 /  ( 1 + h/30.0f+ m/30.0f+ r/30.0f) ;
    float4 NickKm = 30.0;
    float4 NickVm = 80.0;
    float4 PolConc = 1.0;
    float4 PolConcAttached = (t + u) * ( 1 - 1 /  ( 1 + e/80.0f+ j/80.0f+ o/80.0f+ g/5.5f+ l/5.5f+ q/5.5f)  );
    float4 PolConcFree = (t + u) * 1 /  ( 1 + e/80.0f+ j/80.0f+ o/80.0f+ g/5.5f+ l/5.5f+ q/5.5f) ;
    float4 PolKm = 80.0;
    float4 PolKmBoth = 5.5;
    float4 PolVm = 1050.0;
    float4 alpha = 3.0;
    float4 dangleL1to1 = 1.0;
    float4 dangleL1to2 = 1.0;
    float4 dangleL2to3 = 1.0;
    float4 dangleR1to1 = 1.0;
    float4 dangleR1to2 = 1.0;
    float4 dangleR2to3 = 1.0;
    float4 displ = 0.2;
    float4 exo = (ExoConcFree + ExoConcAttached)*ExoConc * ExoVm/(ExoKm * ( 1 + a/440.0f+ b/440.0f+ c/150.0f) );
    float4 exoinhib = ExoKm/ExoKmInhib * (ExoConcFree + ExoConcAttached)*ExoConc * ExoVm/(ExoKm * ( 1 + a/440.0f+ b/440.0f+ c/150.0f) );
    float4 ka = 10.0;
    float4 kb = 50.0;
    float4 kc = 1.0;
    float4 kdup = 0.2;
    float4 nick = (NickConcFree + NickConcAttached)*NickConc * NickVm/(NickKm * ( 1 + h/30.0f+ m/30.0f+ r/30.0f) );
    float4 pol = (PolConcFree + PolConcAttached)*PolConc * PolVm/(PolKm * ( 1 + e/80.0f+ j/80.0f+ o/80.0f+ g/5.5f+ l/5.5f+ q/5.5f) );
    float4 poldispl = displ * PolKm/PolKmBoth * (PolConcFree + PolConcAttached)*PolConc * PolVm/(PolKm * ( 1 + e/80.0f+ j/80.0f+ o/80.0f+ g/5.5f+ l/5.5f+ q/5.5f) );
    float4 ratioleft = 0.002;
    float4 ratioright = 0.01;
    float4 stack1to1 = 0.2;
    float4 stack1to2 = 0.2;
    float4 stack2to3 = 0.2;
    t = PolConcFree;
    t_in = PolConcFree;
    u = PolConcAttached;
    u_in = PolConcAttached;
    v = NickConcFree;
    v_in = NickConcFree;
    w = NickConcAttached;
    w_in = NickConcAttached;
    x = ExoConcFree;
    x_in = ExoConcFree;
    y = ExoConcAttached;
    y_in = ExoConcAttached;
    delta_a = kdup * ( ka * (dangleL1to2 * e + stack1to2 / dangleR1to2 * g ) - a * ( d + f ) ) + kdup * ( ka * (dangleL1to1 * o + stack1to1 / dangleR1to1 * q ) - a * ( n + p )  + c * o - ratioleft * a * s) + pol * q + kdup * ( ka * (dangleR1to1 * p + stack1to1 / dangleL1to1 * q ) - a * ( n + o )  + c * p - ratioright * a * s )  - exo * a + D_a* laplacian_a;
    delta_b = pol * g + kdup * ( kb * (dangleR1to2 * f + stack1to2 / dangleL1to2 * g ) - b * ( d + e )  )  + kdup * ( kb * (dangleL2to3 * j + stack2to3 / dangleR2to3 * l ) - b * ( i + k ) ) - exo * b + D_b* laplacian_b;
    delta_c = pol * l + kdup * ( kc * (dangleR2to3 * k + stack2to3 / dangleL2to3 * l ) - c * ( i + j )  )  + kdup * (alpha * dangleR2to3 * kc * s - c * ( n + o + p ) + s * ( ratioleft * a + ratioright * a ) ) - exoinhib * c + D_c* laplacian_c;
    delta_d = kdup * ( dangleL1to2 * ka * e + dangleR1to2 * kb * f - d * ( a + b )  );
    delta_e = kdup * ( a * d + stack1to2 / dangleR1to2 * kb * g - e * ( dangleL1to2 * ka + b )  ) - pol * e;
    delta_f = kdup * ( b * d + stack1to2 / dangleL1to2 * ka * g - f * ( dangleR1to2 * kb + a )  );
    delta_g = kdup * ( a * f + b * e - g * ( stack1to2 / dangleR1to2 * ka + stack1to2 / dangleL1to2 * kb ) ) + nick * h - pol * g;
    delta_h = pol * e + pol * g - nick * h;
    delta_i = kdup * ( dangleL2to3 * kb * j + dangleR2to3 * kc * k - i * ( b + c )  );
    delta_j = kdup * ( b * i + stack2to3 / dangleR2to3 * kc * l - j * ( dangleL2to3 * kb + c )  ) - pol * j;
    delta_k = kdup * ( c * i + stack2to3 / dangleL2to3 * kb * l - k * ( dangleR2to3 * kc + b )  );
    delta_l = kdup * ( b * k + c * j - l * ( stack2to3 / dangleR2to3 * kb + stack2to3 / dangleL2to3 * kc ) ) + nick * m - poldispl * l;
    delta_m = pol * j + poldispl * l - nick * m;
    delta_n = kdup * ( dangleL1to1 * ka * o + dangleR1to1 * ka * p - n * ( a + a )  + alpha * dangleR2to3 * kc * s - c * n );
    delta_o = kdup * ( a * n + stack1to1 / dangleR1to1 * ka * q - o * ( dangleL1to1 * ka + a )  + ratioleft * a * s - c * o ) - pol * o;
    delta_p = kdup * ( a * n + stack1to1 / dangleL1to1 * ka * q - p * ( dangleR1to1 * ka + a )  + ratioright * a * s - c * p );
    delta_q = kdup * ( a * p + a * o - q * ( stack1to1 / dangleR1to1 * ka + stack1to1 / dangleL1to1 * ka ) ) + nick * r - pol * q;
    delta_r = pol * o + pol * q - nick * r;
    delta_s =  - kdup * (alpha * dangleR2to3 * kc * s - c * ( n + o + p ) + s * ( ratioleft * a + ratioright * a ) );
    delta_t = D_PolFree * laplacian_t;
    delta_u = D_PolAttached * laplacian_u;
    delta_v = D_NickFree * laplacian_v;
    delta_w = D_NickAttached * laplacian_w;
    delta_x = D_ExoFree * laplacian_x;
    delta_y = D_ExoAttached * laplacian_y;
    

    a_out[index_here] = a + timestep * delta_a;
    b_out[index_here] = b + timestep * delta_b;
    c_out[index_here] = c + timestep * delta_c;
    d_out[index_here] = d + timestep * delta_d;
    e_out[index_here] = e + timestep * delta_e;
    f_out[index_here] = f + timestep * delta_f;
    g_out[index_here] = g + timestep * delta_g;
    h_out[index_here] = h + timestep * delta_h;
    i_out[index_here] = i + timestep * delta_i;
    j_out[index_here] = j + timestep * delta_j;
    k_out[index_here] = k + timestep * delta_k;
    l_out[index_here] = l + timestep * delta_l;
    m_out[index_here] = m + timestep * delta_m;
    n_out[index_here] = n + timestep * delta_n;
    o_out[index_here] = o + timestep * delta_o;
    p_out[index_here] = p + timestep * delta_p;
    q_out[index_here] = q + timestep * delta_q;
    r_out[index_here] = r + timestep * delta_r;
    s_out[index_here] = s + timestep * delta_s;
    t_out[index_here] = t + timestep * delta_t;
    u_out[index_here] = u + timestep * delta_u;
    v_out[index_here] = v + timestep * delta_v;
    w_out[index_here] = w + timestep * delta_w;
    x_out[index_here] = x + timestep * delta_x;
    y_out[index_here] = y + timestep * delta_y;
}
