apply plugin: 'application'

apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '1.0-SNAPSHOT'

def versionFile = 'src/main/java/erne/Version.java'
def tempDir = 'build/tmp/sourcesCache'
def versionFileName = 'Version.java'

compileJava.doFirst {
    copy {
        from(versionFile)
        into(tempDir)
    }
    ant.replace(file: versionFile, token: '@VERSION@', value: gitVersion())
}

compileJava.doLast {
    copy {
        from(tempDir + '/' + versionFileName)
        into(project.file(versionFile).parent)
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
    flatDir {
   		dirs 'libs'
   	}    
}

mainClassName = 'cluster.Cluster'

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	compile 'org.apache.commons:commons-math3:3.5'
	compile 'net.sf.jung:jung-algorithms:2.0.1'
	compile 'net.sf.jung:jung-visualization:2.0.1'
	compile 'net.sf.jung:jung-graph-impl:2.0.1'
	compile 'net.sf.jung:jung-samples:2.0.1'
	compile 'com.google.code.gson:gson:2.3'
	compile 'org.jfree:jfreechart:1.0.19'
	compile 'com.hazelcast:hazelcast:3.4.2'
	compile name: 'DACCAD-1.5-RC1'
	compile 'org.reflections:reflections:0.9.9'
	compile 'com.hazelcast:hazelcast:3.5'
	compile 'ch.qos.logback:logback-classic:1.1.3'
	compile 'org.apache.commons:commons-lang3:3.4'
	
	// for object refection
	compile name: 'reflection-ui-1.1'
	compile 'com.fasterxml:classmate:1.2.0'
	compile 'com.jhlabs:filters:2.0.235-1'
	compile 'com.google.guava:guava:18.0'
	compile 'com.thoughtworks.paranamer:paranamer:2.7'
	compile 'org.swinglabs:swing-worker:1.1'
	compile 'org.swinglabs:swingx:1.6.1'
	
	runtime files('config')
	runtime 'org.codehaus.janino:janino:2.7.6'
	testCompile 'junit:junit:4.11'
}

def gitVersion() {
    ext.gitHash = 'git rev-parse --short HEAD'.execute().text.trim()
    ext.dirty   = 'git status --porcelain'.execute().text.trim()
    dirty.empty ? gitHash : gitHash + '-dirty'
}

task dist(type: Copy) {
    // http://www.gradle.org/docs/current/userguide/working_with_files.html

    dependsOn compileJava, jar

    file("$buildDir/dist").deleteDir()

    into "$buildDir/dist"

    into('config') {
        from "$projectDir/config"
    }

    into("lib") {
        from(jar) {
            rename { String fileName ->
                fileName.replace('SNAPSHOT', gitVersion())
            }
        }
        from(configurations.runtime) {
            exclude '*.conf', '*.xml', '*.p12'  // Files in config directory
        }
    }

    from "$projectDir/dist"
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
